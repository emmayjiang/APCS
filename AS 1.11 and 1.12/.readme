This fulfills the assignment for Week 11. The exercises are as follows:

Exercise 1.11.  A function f is defined by the rule that
f(n) = n if n < 3,
f(n) = f(n-1) + 2f(n-2) + 3f(n-3) if n >= 3
Write a procedure that computes f by means of a recursive process. Write a procedure that computes f by means of an iterative process.

Exercise 1.12.  The following pattern of numbers is called Pascal's triangle.
The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal's triangle by means of a recursive process.

This project fulfills the specifications because it properly completes the tasks written above.

Currently, some of the code can be simplified and rewritten in a more cohorent manner, especially the code for the iterative process for Exercise 1.11.

For Exercise 1.11, there are two methods for iteration, one of them checking to make sure the given n is greater than three before proceeding to iteration, and the other actually iterating through the process. The recursion method is relatively straightforward.

For Exercise 1.12, I use the formula (nCr) = (n-1Cr-1) + (n-1Cr) to recursively find the value of an element.

The iterative process was the hardest part of the code, and I had some help from Amy Lin in iterpreting how the code can be written as an iterative process.