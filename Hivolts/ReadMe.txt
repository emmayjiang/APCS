HiVolts is a simple game, originally made with 1970s graphics. In this game, there are deadly electric fences along with Mhos that are out to eat you. The game itself is set up simply as according to the project’s restrictions. The game board itself is a 12-by-12 bounded grid, each cell represented here by 50 x 50 pixels. The player and the Mhos alternate turns, the player fighting to be the last one alive by manipulating the Mhos to crash into the fences.

The project fulfills the project specifications. The players move using letters on the keyboard, the Mhos move after the player’s turn, and any of the entities die upon contacting an electric fence. There is a title screen and a start button, along with a game over / win screen with a restart button.

Currently, the biggest, most obvious problem with our code is that we were unable to make the restart button work. Try as we might, when we reached an hour past the due date and we desperately couldn’t figure it out, we gave up. Another problem is that our code is messy. Since neither Amy or I have worked very much with GitHub or with each other when coding, our different coding styles seemed to clash in this project, which ended up with a lot of loose ends that were hastily fixed, which made it look a lot more cluttered than it needs to be. This made debugging a nightmare. In addition, since we used different platforms (Amy on Mac, I on PC) the program behaved differently on both computers. We ended up doing most of our testing on Amy’s laptop. There may be problems with the code if run on a PC.

Inside Hivolts, the player moves via KeyListener, which allows for the user to control it. Every turn, Mhos move following the algorithm outlined in the project instructions, which is called from the Hivolts class and executes code located within the Mho class. At the beginning of the game, a randomizer, located in the Board class, randomly sets the spawning location of a player, 20 fences, and 12 Mhos. The rest of the entity classes contain information pertaining to each entity, including getters and setters.

This project was a huge learning experience for both Amy and I. None of us had ever worked very much in depth with JFrame, and we both had little experience with Graphics. However, with a lot of help from each other and Google, we were slowly able to make our way through the project. A lot of our code was incompatible for a while, which made integrating our work difficult, but we managed to get through it. One of the big problems we had was the disconnect between our two platforms. My PC ran the code in its earlier stages just fine, however, later on it was Amy’s Mac who could run the code correctly. Also, we were both extremely busy during the time we were working on this project, which caused a lot of late nights. We weren’t able to keep up with the schedule we set for each other because we realized that the way we set up our schedule was very different from the way the code should’ve been written. However, we are both proud of the results.

This was a partner project, so I owe a huge thanks to Amy, who completed this project with me. My part of the code was the KeyListener found in our Hivolts class, the entity classes (Entity, Mho, Fence, and Player), as well as the methods for collision and movement. Amy, on the other hand, wrote the randomizers found in Board, the code found in Display that integrated the JPanel with the JFrame, along with the turn updater used to signal the end of each turn for the player and for the Mhos.