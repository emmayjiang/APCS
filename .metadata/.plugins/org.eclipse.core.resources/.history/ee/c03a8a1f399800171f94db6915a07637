
public class LogicalSentence {
	
	private PropositionConstant propC;
	
	public LogicalSentence() {
		
	}
	
	public LogicalSentence(PropositionConstant a) {
		propC = a;
	}
	
	public static void main(String[] args) {
		
		PropositionConstant a = new PropositionConstant("a");
		PropositionConstant b = new PropositionConstant("b");
		LogicalSentence l1 = new LogicalSentence(a);
		LogicalSentence l2 = new LogicalSentence(b);
		LogicalSentence l3 = new Negation(l1);
		LogicalSentence l4 = new Negation(l3);
		LogicalSentence l5 = new Conjunction(l3, new Negation(l4));

		TruthAssignment ta1 = new TruthAssignment();
		ta1.put(b, true);
		ta1.put(a, false); 
		System.out.println(l5.evaluate(ta1));
		System.out.println(legal("a&"));
		System.out.println(findMatch("a(b)", 0));

		//String[] pc = {"p"};
		//truthTable(pc);
	}
	
	public boolean evaluate(TruthAssignment truthVal) {
		boolean retVal = truthVal.get();
		
		return retVal;
	}
	
	/**
	 * A method that tests if a string is a legal logical sentence.
	 * 
	 * @param str	the input string
	 * @return		true: is a legal logical sentence
	 * 				false: is not a legal logical sentence
	 */
	public static String legal(String str) {
		//removes spaces
		str = removeSpace(str);
		
		//checks for "" which is an illegal sentence
		if (str.equals("")) {
			return "False";
		}
		//checks to make sure it does not end with a logical operator
		if (str.substring(str.length()-1,str.length()).equals("&") || str.substring(str.length()-1,str.length()).equals("|")
				|| str.substring(str.length()-1,str.length()).equals("~")) {
			return "False";
		}
		if (str.length() >= 2) {
			 if (str.substring(str.length()-2,str.length()).equals("=>")) {
				 return "False";
			}
		}
		if (str.length() >= 3) {
			if (str.substring(str.length()-3,str.length()).equals("<=>")) {
				return "False";
			}
		}
		//checks if it begins with any Logical Operator besides "~"
		if (str.substring(0,1).equals("&") || str.substring(0,1).equals("|")) {
			return "False";
		}
		if (str.length() >= 2) {
			if (str.substring(0,2).equals("=>")) {
				return "False";
			}
		}
		if (str.length() >= 3) {
			if (str.substring(0,3).equals("<=>")) {
				return "False";
			}
		}
				
		//checks that there are no cases where two operators are together unless it's "~"
		for (int i = 0; i < str.length()-1; i++)
		{
			if (str.substring(i,i+1).equals("&") || str.substring(i,i+1).equals("|") || str.substring(i,i+1).equals("~")
					|| str.substring(i,i+2).equals("=>") || str.substring(i,i+3).equals("<=>")) {
				if (str.substring(i+1,i+2).equals("&") || str.substring(i+1,i+2).equals("|")) {
					return "False";
				}
			}
		}
		
		for (int i = 0; i < str.length()-4; i++)
		{
			if (str.substring(i,i+2).equals("=>")) {
				if (str.substring(i+2,i+3).equals("&") || str.substring(i+2,i+3).equals("|")
						|| str.substring(i+2,i+4).equals("=>") || str.substring(i+2,i+5).equals("<=>")) {
					return "False";
				}
			}
		}
		for (int i = 0; i < str.length()-5; i++)
		{
			if (str.substring(i,i+3).equals("<=>")) {
				if (str.substring(i+3,i+4).equals("&") || str.substring(i+3,i+4).equals("|")
						|| str.substring(i+3,i+5).equals("=>") || str.substring(i+3,i+6).equals("<=>")) {
					return "False";
				}
			}
		}
		
		//checks that no two letters are next to each other
		for (int i = 0; i < str.length()-1; i++) {
			if (str.substring(i,i+1).compareTo("A") >= 0 && str.substring(i,i+1).compareTo("Z") <= 0) {
				if (str.substring(i+1,i+2).compareTo("A") >= 0 && str.substring(i+1,i+2).compareTo("Z") <= 0) {
					return "False";
				}
			}
		}
		
		return "True";
	}
	
	/**
	 * A helper method that removes all spaces inside a string
	 * 
	 * @param str	the input string
	 * @return		the input string without any spaces
	 */
	public static String removeSpace(String str) {
		String str2 = "";
		for (int i = 0; i < str.length(); i++) {
			if (!(str.substring(i, i+1).equals(" "))) {
				str2 = str2 + str.substring(i, i+1);
			}
		}
		return str2;
	}
	
	public static int findMatch(String str, int x) {
		//checks for the opening parenthesis
		for (int i = 0; i < str.length()-1; i++) {
			if (str.substring(i,i+1).equals("(")) {
				//checks for the closing parenthesis
				for (int j = str.length()-1; j > i; j++) {
					if (str.substring(j,j+1).equals(")")) {
						//checks for any parenthesis within the two parenthesis by calling the method recursively
						str = str.substring(i, j);
						x = str.indexOf(")") - 1;
						findMatch(str, x);
					} else {
						return str.indexOf(")") - 1;
					}
				}
			}
		}
		return x;
	}
}
