
import java.awt.*;
import javax.swing.JApplet;

public class Flag extends JApplet {
	
	private double A = 1.0;
	private double B = 1.9;
	private double C = 0.5385;
	private double D = 0.76;
	private double E = 0.054;
	private double F = 0.054;
	private double G = 0.063;
	private double H = 0.063;
	private double K = 0.0616;
	private double L = 0.0769;
	
	private double pi = Math.PI;
	
	public Flag() {
		
	}
	
	public void paint(Graphics g) {
		
		int height = getHeight();
		int width = getWidth();
		
		if (height * B <= width) {
            width = (int) (height * B);
            height = getHeight();
        } else {
            height = (int) (width / B);
        }
		
		background(g, height, width);
	}
	
	public void background(Graphics g, int height, int width) {
		
		//draw stripes
		g.setColor(Color.RED);
		g.fillRect(0, 0, (int) width, (int) height);
		
		g.setColor(Color.WHITE);
		for (int j = 1; j <= 6; j++) {
			g.fillRect(0, (int) (2 * height * L * j - (height * L)), (int) (width), (int) (height * L));
		}
		
		//draw union
		g.setColor(Color.BLUE);
		g.fillRect(0, 0, (int) (height * D), (int) (height * C));
		
		//draw stars
		for(int i=0; i<11;i++){
			if(i % 2 == 0){
				
				//draws the stars in even rows
				stars(g, (int) (height * G + height * G * i), (int) (height * F), width, height);
				stars(g, (int) (height * G + height * G * i), (int) (height * 3 * F), width, height);
				stars(g, (int) (height * G + height * G * i), (int) (height * 5 * F), width, height);
				stars(g, (int) (height * G + height * G * i), (int) (height * 7 * F), width, height);
				stars(g, (int) (height * G + height * G * i), (int) (height * 9 * F), width, height);
				
			} else {

				//draws the stars in the odd rows
				stars(g, (int) (height * G + height * G * i), (int) (height * 2 * F), width, height);
				stars(g, (int) (height * G + height * G * i), (int) (height * 4 * F), width, height);
				stars(g, (int) (height * G + height * G * i), (int) (height * 6 * F), width, height);
				stars(g, (int) (height * G + height * G * i), (int) (height * 8 * F), width, height);
			}		
		}
	}

	//draws the stars
	public void stars(Graphics g, int midX, int midY,int width,int height){
		
		int radius[] = {height*366/10000,height*133/10000,height*366/10000,height*133/10000};
		int nPoints = 10;
		int[] X = new int[nPoints];
		int[] Y = new int[nPoints];
			
		//outer border of the star
		for (double current=0.0; current<nPoints; current++)
		{
			int i = (int) current;
			double x = Math.cos(current*((2*Math.PI)/5)+60)*radius[i % 4];
			double y = Math.sin(current*((2*Math.PI)/5)+60)*radius[i % 4];

			X[i] = (int) x+midX;
			Y[i] = (int) y+midY;
		}

		//small pentagon inside
		g.setColor(Color.WHITE);
		g.fillPolygon(X, Y, nPoints);
		
		//int xCordSmallP[] = new int[5];
		//int yCordSmallP[] = new int[5];
		//for(int k = 0; k<5; k++){
			//xCordSmallP[k] = (int) (height*1/45* Math.cos(k*2*Math.PI/5+180)+midX+1);
			//yCordSmallP[k] = (int) (height*1/75* Math.sin(k*2*Math.PI/5+180)+midY+1);
		//}		
		//g.fillPolygon(xCordSmallP, yCordSmallP, 5);
	}
}
