<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item value="true" key="isRegEx"/>
		<item value="" key="selection"/>
		<item value="false" key="casesensitive"/>
		<item value="false" key="incremental"/>
		<item value="false" key="wrap"/>
		<item value="false" key="wholeword"/>
		<list key="findhistory">
			<item value="color.green"/>
			<item value="\Rimport java\.awt\.Color;\Rimport java\.awt\.Container;\Rimport java\.awt\.Dimension;\Rimport java\.awt\.Font;\Rimport java\.awt\.GridLayout;\Rimport java\.awt\.event\.ActionEvent;\Rimport java\.awt\.event\.ActionListener;\R\Rimport javax\.swing\.JFrame;\Rimport javax\.swing\.JOptionPane;\Rimport javax\.swing\.JTextField;\R\Rpublic class Sudoku extends JFrame \{\R\R\tprivate int\[\]\[\] board;\R\tprivate boolean\[\]\[\] hide;\R\tprivate JTextField\[\]\[\] cells;\R\tprivate int missing;\R\R\tpublic Sudoku\(\) \{\R\t\tboard = new int\[9\]\[9\];\R\t\tfillBoard\(\);\R\R\t\thide = new boolean\[9\]\[9\];\R\t\tfor \(int i = 0; i &lt; hide\.length; i\+\+\) \{\R\t\t\tfor \(int j = 0; j &lt; hide\[0\]\.length; j\+\+\) \{\R\t\t\t\tdouble ran = Math\.random\(\);\R\t\t\t\tif \(ran &gt;= 0\.60\) \{\R\t\t\t\t\thide\[i\]\[j\] = false;\R\t\t\t\t\} else \{\R\t\t\t\t\thide\[i\]\[j\] = true;\R\t\t\t\t\tmissing\+\+;\R\t\t\t\t\}\R\t\t\t\}\R\t\t\}\R\R\t\tContainer cp = getContentPane\(\);\R\t\tcp\.setLayout\(new GridLayout\(9, 9\)\);\R\R\t\tInputListener il = new InputListener\(\);\R\R\t\tcells = new JTextField\[9\]\[9\];\R\t\tfor \(int i = 0; i &lt; 9; \+\+i\) \{\R\t\t\tfor \(int j = 0; j &lt; 9; \+\+j\) \{\R\t\t\t\tcells\[i\]\[j\] = new JTextField\(\);\R\t\t\t\tcp\.add\(cells\[i\]\[j\]\);\R\t\t\t\tif \(hide\[i\]\[j\]\) \{\R\t\t\t\t\tcells\[i\]\[j\]\.setText\(&quot;&quot;\);\R\t\t\t\t\tcells\[i\]\[j\]\.setEditable\(true\);\R\t\t\t\t\tcells\[i\]\[j\]\.setBackground\(Color\.YELLOW\);\R\t\t\t\t\tcells\[i\]\[j\]\.addActionListener\(il\);\R\t\t\t\t\} else \{\R\t\t\t\t\tcells\[i\]\[j\]\.setText\(board\[i\]\[j\] \+ &quot;&quot;\);\R\t\t\t\t\tcells\[i\]\[j\]\.setEditable\(false\);\R\t\t\t\t\tcells\[i\]\[j\]\.setBackground\(new Color\(240, 240, 240\)\);\R\t\t\t\t\tcells\[i\]\[j\]\.setForeground\(Color\.BLACK\);\R\t\t\t\t\}\R\t\t\t\tcells\[i\]\[j\]\.setHorizontalAlignment\(JTextField\.CENTER\);\R\t\t\t\tcells\[i\]\[j\]\.setFont\(new Font\(&quot;Arial&quot;, Font\.BOLD, 20\)\);\R\t\t\t\}\R\t\t\}\R\R\t\tcp\.setPreferredSize\(new Dimension\(540, 540\)\);\R\t\tpack\(\);\R\R\t\tsetDefaultCloseOperation\(JFrame\.EXIT_ON_CLOSE\);\R\t\tsetTitle\(&quot;Sudoku&quot;\);\R\t\tsetVisible\(true\);\R\t\}\R\R\t// Sudoku Generator\R\tpublic void fillBoard\(\) \{\R\t\t// Fill the diagonal of 3 x 3 matrices\R\t\tfillDiagonal\(\);\R\R\t\t// Fill remaining blocks\R\t\tfillRemaining\(0, 3\);\R\R\t\t// Remove Randomly missing digits to make game\R\t\tremoveKDigits\(\);\R\t\}\R\R\t// Fill the diagonal 3 number of 3 x 3 matrices\R\tvoid fillDiagonal\(\) \{\R\R\t\tfor \(int i = 0; i &lt; 9; i = i \+ 3\)\R\R\t\t\t// for diagonal box, start coordinates-&gt;i==j\R\t\t\tfillBox\(i, i\);\R\t\}\R\R\tboolean canUseCell\(int rowStart, int colStart, int num\) \{\R\t\tfor \(int i = 0; i &lt; 3; i\+\+\) \{\R\t\t\tfor \(int j = 0; j &lt; 3; j\+\+\) \{\R\t\t\t\tif \(board\[rowStart \+ i\]\[colStart \+ j\] == num\) \{\R\t\t\t\t\treturn false;\R\t\t\t\t\}\R\t\t\t\}\R\t\t\}\R\R\t\treturn true;\R\t\}\R\R\t// Fill a 3 x 3 matrix\.\R\tvoid fillBox\(int row, int col\) \{\R\t\tint num;\R\t\tfor \(int i = 0; i &lt; 3; i\+\+\) \{\R\t\t\tfor \(int j = 0; j &lt; 3; j\+\+\) \{\R\t\t\t\tdo \{\R\t\t\t\t\tnum = \(int\) Math\.floor\(\(Math\.random\(\) \* 9 \+ 1\)\);\R\t\t\t\t\} while \(!canUseCell\(row, col, num\)\);\R\R\t\t\t\tboard\[row \+ i\]\[col \+ j\] = num;\R\t\t\t\}\R\t\t\}\R\t\}\R\R\t// Check if safe to put in cell\R\tboolean CheckIfSafe\(int r, int c, int num\) \{\R\t\tfor \(int i = 0; i &lt; 9; i\+\+\) \{\R\t\t\tif \(board\[r\]\[i\] == num\) \{\R\t\t\t\treturn false;\R\t\t\t\}\R\t\t\}\R\R\t\tfor \(int i = 0; i &lt; 9; i\+\+\) \{\R\t\t\tif \(board\[i\]\[c\] == num\) \{\R\t\t\t\treturn false;\R\t\t\t\}\R\t\t\}\R\R\t\tfor \(int i = 0; i &lt; 3; i\+\+\) \{\R\t\t\tfor \(int j = 0; j &lt; 3; j\+\+\) \{\R\t\t\t\tif \(board\[r - r % 3 \+ i\]\[c - c % 3 \+ j\] == num\) \{\R\t\t\t\t\treturn false;\R\t\t\t\t\}\R\t\t\t\}\R\t\t\}\R\R\t\treturn true;\R\t\}\R\R\t// A recursive function to fill remaining\R\t// matrix\R\tboolean fillRemaining\(int i, int j\) \{\R\t\t// System\.out\.println\(i\+&quot; &quot;\+j\);\R\t\tif \(j &gt;= 9 &amp;&amp; i &lt; 9 - 1\) \{\R\t\t\ti = i \+ 1;\R\t\t\tj = 0;\R\t\t\}\R\t\tif \(i &gt;= 9 &amp;&amp; j &gt;= 9\)\R\t\t\treturn true;\R\R\t\tif \(i &lt; 3\) \{\R\t\t\tif \(j &lt; 3\)\R\t\t\t\tj = 3;\R\t\t\} else if \(i &lt; 9 - 3\) \{\R\t\t\tif \(j == \(int\) \(i / 3\) \* 3\)\R\t\t\t\tj = j \+ 3;\R\t\t\} else \{\R\t\t\tif \(j == 9 - 3\) \{\R\t\t\t\ti = i \+ 1;\R\t\t\t\tj = 0;\R\t\t\t\tif \(i &gt;= 9\)\R\t\t\t\t\treturn true;\R\t\t\t\}\R\t\t\}\R\R\t\tfor \(int num = 1; num &lt;= 9; num\+\+\) \{\R\t\t\tif \(CheckIfSafe\(i, j, num\)\) \{\R\t\t\t\tboard\[i\]\[j\] = num;\R\t\t\t\tif \(fillRemaining\(i, j \+ 1\)\)\R\t\t\t\t\treturn true;\R\R\t\t\t\tboard\[i\]\[j\] = 0;\R\t\t\t\}\R\t\t\}\R\t\treturn false;\R\t\}\R\R\t// Remove the missing no\. of digits to\R\t// complete game\R\tpublic void removeKDigits\(\) \{\R\t\tint count = missing;\R\t\twhile \(count != 0\) \{\R\t\t\tint cellId = \(int\) Math\.floor\(\(Math\.random\(\) \* 81 \+ 1\)\);\R\R\t\t\t// System\.out\.println\(cellId\);\R\t\t\t// extract coordinates i and j\R\t\t\tint i = \(cellId / 9\);\R\t\t\tint j = cellId % 9;\R\t\t\tif \(j != 0\)\R\t\t\t\tj = j - 1;\R\R\t\t\t// System\.out\.println\(i\+&quot; &quot;\+j\);\R\t\t\tif \(board\[i\]\[j\] != 0\) \{\R\t\t\t\tcount--;\R\t\t\t\tboard\[i\]\[j\] = 0;\R\t\t\t\}\R\t\t\}\R\t\}\R\R\tprivate class InputListener implements ActionListener \{\R\R\t\t@Override\R\t\tpublic void actionPerformed\(ActionEvent e\) \{\R\t\t\tint row = -1;\R\t\t\tint col = -1;\R\R\t\t\tJTextField source = \(JTextField\) e\.getSource\(\);\R\R\t\t\tboolean found = false;\R\t\t\tfor \(int i = 0; i &lt; 9 &amp;&amp; !found; \+\+i\) \{\R\t\t\t\tfor \(int j = 0; j &lt; 9 &amp;&amp; !found; \+\+j\) \{\R\t\t\t\t\tif \(cells\[i\]\[j\] == source\) \{\R\t\t\t\t\t\trow = i;\R\t\t\t\t\t\tcol = j;\R\t\t\t\t\t\tfound = true;\R\t\t\t\t\t\}\R\t\t\t\t\}\R\t\t\t\}\R\R\t\t\tint in = Integer\.parseInt\(cells\[row\]\[col\]\.getText\(\)\);\R\t\t\tif \(in == board\[row\]\[col\]\) \{\R\t\t\t\tcells\[row\]\[col\]\.setBackground\(Color\.GREEN\);\R\t\t\t\thide\[row\]\[col\] = false;\R\t\t\t\} else \{\R\t\t\t\tcells\[row\]\[col\]\.setBackground\(Color\.RED\);\R\t\t\t\}\R\R\t\t\tisFinished\(\);\R\t\t\}\R\R\t\tpublic boolean isFinished\(\) \{\R\t\t\tfor \(int i = 0; i &lt; hide\.length; i\+\+\) \{\R\t\t\t\tfor \(int j = 0; j &lt; hide\[0\]\.length; j\+\+\) \{\R\t\t\t\t\tif \(hide\[i\]\[j\]\) \{\R\t\t\t\t\t\treturn false;\R\t\t\t\t\t\}\R\t\t\t\t\}\R\t\t\t\}\R\t\t\tJOptionPane\.showMessageDialog\(null, &quot;Congratulations! You did it!&quot;\);\R\t\t\treturn true;\R\t\t\}\R\t\}\R\R\tpublic static void main\(String\[\] args\) \{\R\t\tSudoku s = new Sudoku\(\);\R\t\}\R\}\R"/>
			<item value="randomgenerator"/>
			<item value="\Rimport java\.awt\.Color;\Rimport java\.awt\.Container;\Rimport java\.awt\.Dimension;\Rimport java\.awt\.Font;\Rimport java\.awt\.GridLayout;\Rimport java\.awt\.event\.ActionEvent;\Rimport java\.awt\.event\.ActionListener;\Rimport java\.util\.Arrays;\R\Rimport javax\.swing\.JFrame;\Rimport javax\.swing\.JOptionPane;\Rimport javax\.swing\.JTextField;\R\Rpublic class Sudoku extends JFrame \{\R\R\tprivate int\[\]\[\] board;\R\tprivate boolean\[\]\[\] hide;\R\tprivate JTextField\[\]\[\] cells;\R\tprivate int missing;\R\R\tpublic Sudoku\(\) \{\R\t\tboard = new int\[9\]\[9\];\R\t\tfillBoard\(\);\R\R\t\thide = new boolean\[9\]\[9\];\R\t\tfor \(int i = 0; i &lt; hide\.length; i\+\+\) \{\R\t\t\tfor \(int j = 0; j &lt; hide\[0\]\.length; j\+\+\) \{\R\t\t\t\tdouble ran = Math\.random\(\);\R\t\t\t\tif \(ran &gt;= 0\.60\) \{\R\t\t\t\t\thide\[i\]\[j\] = false;\R\t\t\t\t\} else \{\R\t\t\t\t\thide\[i\]\[j\] = true;\R\t\t\t\t\tmissing\+\+;\R\t\t\t\t\}\R\t\t\t\}\R\t\t\}\R\R\t\tContainer cp = getContentPane\(\);\R\t\tcp\.setLayout\(new GridLayout\(9, 9\)\);\R\R\t\tInputListener il = new InputListener\(\);\R\R\t\tcells = new JTextField\[9\]\[9\];\R\t\tfor \(int i = 0; i &lt; 9; \+\+i\) \{\R\t\t\tfor \(int j = 0; j &lt; 9; \+\+j\) \{\R\t\t\t\tcells\[i\]\[j\] = new JTextField\(\);\R\t\t\t\tcp\.add\(cells\[i\]\[j\]\);\R\t\t\t\tif \(hide\[i\]\[j\]\) \{\R\t\t\t\t\tcells\[i\]\[j\]\.setText\(&quot;&quot;\);\R\t\t\t\t\tcells\[i\]\[j\]\.setEditable\(true\);\R\t\t\t\t\tcells\[i\]\[j\]\.setBackground\(Color\.YELLOW\);\R\t\t\t\t\tcells\[i\]\[j\]\.addActionListener\(il\);\R\t\t\t\t\} else \{\R\t\t\t\t\tcells\[i\]\[j\]\.setText\(board\[i\]\[j\] \+ &quot;&quot;\);\R\t\t\t\t\tcells\[i\]\[j\]\.setEditable\(false\);\R\t\t\t\t\tcells\[i\]\[j\]\.setBackground\(new Color\(240, 240, 240\)\);\R\t\t\t\t\tcells\[i\]\[j\]\.setForeground\(Color\.BLACK\);\R\t\t\t\t\}\R\t\t\t\tcells\[i\]\[j\]\.setHorizontalAlignment\(JTextField\.CENTER\);\R\t\t\t\tcells\[i\]\[j\]\.setFont\(new Font\(&quot;Arial&quot;, Font\.BOLD, 20\)\);\R\t\t\t\}\R\t\t\}\R\R\t\tcp\.setPreferredSize\(new Dimension\(540, 540\)\);\R\t\tpack\(\);\R\R\t\tsetDefaultCloseOperation\(JFrame\.EXIT_ON_CLOSE\);\R\t\tsetTitle\(&quot;Sudoku&quot;\);\R\t\tsetVisible\(true\);\R\t\}\R\R\t// Sudoku Generator\R\tpublic void fillBoard\(\) \{\R\t\t// Fill the diagonal of 3 x 3 matrices\R\t\tfillDiagonal\(\);\R\R\t\t// Fill remaining blocks\R\t\tfillRemaining\(0, 3\);\R\R\t\t// Remove Randomly missing digits to make game\R\t\tremoveKDigits\(\);\R\t\}\R\R\t// Fill the diagonal 3 number of 3 x 3 matrices\R\tvoid fillDiagonal\(\) \{\R\R\t\tfor \(int i = 0; i &lt; 9; i = i \+ 3\)\R\R\t\t\t// for diagonal box, start coordinates-&gt;i==j\R\t\t\tfillBox\(i, i\);\R\t\}\R\R\t// Returns false if given 3 x 3 block contains num\.\R\tboolean unUsedInBox\(int rowStart, int colStart, int num\) \{\R\t\tfor \(int i = 0; i &lt; 3; i\+\+\)\R\t\t\tfor \(int j = 0; j &lt; 3; j\+\+\)\R\t\t\t\tif \(board\[rowStart \+ i\]\[colStart \+ j\] == num\)\R\t\t\t\t\treturn false;\R\R\t\treturn true;\R\t\}\R\R\t// Fill a 3 x 3 matrix\.\R\tvoid fillBox\(int row, int col\) \{\R\t\tint num;\R\t\tfor \(int i = 0; i &lt; 3; i\+\+\) \{\R\t\t\tfor \(int j = 0; j &lt; 3; j\+\+\) \{\R\t\t\t\tdo \{\R\t\t\t\t\tnum = randomGenerator\(9\);\R\t\t\t\t\} while \(!unUsedInBox\(row, col, num\)\);\R\R\t\t\t\tboard\[row \+ i\]\[col \+ j\] = num;\R\t\t\t\}\R\t\t\}\R\t\}\R\R\t// Random generator\R\tint randomGenerator\(int num\) \{\R\t\treturn \(int\) Math\.floor\(\(Math\.random\(\) \* num \+ 1\)\);\R\t\}\R\R\t// Check if safe to put in cell\R\tboolean CheckIfSafe\(int i, int j, int num\) \{\R\t\treturn \(unUsedInRow\(i, num\) &amp;&amp; unUsedInCol\(j, num\) &amp;&amp; unUsedInBox\(i - i % 3, j - j % 3, num\)\);\R\t\}\R\R\t// check in the row for existence\R\tboolean unUsedInRow\(int i, int num\) \{\R\t\tfor \(int j = 0; j &lt; 9; j\+\+\)\R\t\t\tif \(board\[i\]\[j\] == num\)\R\t\t\t\treturn false;\R\t\treturn true;\R\t\}\R\R\t// check in the row for existence\R\tboolean unUsedInCol\(int j, int num\) \{\R\t\tfor \(int i = 0; i &lt; 9; i\+\+\)\R\t\t\tif \(board\[i\]\[j\] == num\)\R\t\t\t\treturn false;\R\t\treturn true;\R\t\}\R\R\t// A recursive function to fill remaining\R\t// matrix\R\tboolean fillRemaining\(int i, int j\) \{\R\t\t// System\.out\.println\(i\+&quot; &quot;\+j\);\R\t\tif \(j &gt;= 9 &amp;&amp; i &lt; 9 - 1\) \{\R\t\t\ti = i \+ 1;\R\t\t\tj = 0;\R\t\t\}\R\t\tif \(i &gt;= 9 &amp;&amp; j &gt;= 9\)\R\t\t\treturn true;\R\R\t\tif \(i &lt; 3\) \{\R\t\t\tif \(j &lt; 3\)\R\t\t\t\tj = 3;\R\t\t\} else if \(i &lt; 9 - 3\) \{\R\t\t\tif \(j == \(int\) \(i / 3\) \* 3\)\R\t\t\t\tj = j \+ 3;\R\t\t\} else \{\R\t\t\tif \(j == 9 - 3\) \{\R\t\t\t\ti = i \+ 1;\R\t\t\t\tj = 0;\R\t\t\t\tif \(i &gt;= 9\)\R\t\t\t\t\treturn true;\R\t\t\t\}\R\t\t\}\R\R\t\tfor \(int num = 1; num &lt;= 9; num\+\+\) \{\R\t\t\tif \(CheckIfSafe\(i, j, num\)\) \{\R\t\t\t\tboard\[i\]\[j\] = num;\R\t\t\t\tif \(fillRemaining\(i, j \+ 1\)\)\R\t\t\t\t\treturn true;\R\R\t\t\t\tboard\[i\]\[j\] = 0;\R\t\t\t\}\R\t\t\}\R\t\treturn false;\R\t\}\R\R\t// Remove the missing no\. of digits to\R\t// complete game\R\tpublic void removeKDigits\(\) \{\R\t\tint count = missing;\R\t\twhile \(count != 0\) \{\R\t\t\tint cellId = randomGenerator\(9 \* 9\);\R\R\t\t\t// System\.out\.println\(cellId\);\R\t\t\t// extract coordinates i and j\R\t\t\tint i = \(cellId / 9\);\R\t\t\tint j = cellId % 9;\R\t\t\tif \(j != 0\)\R\t\t\t\tj = j - 1;\R\R\t\t\t// System\.out\.println\(i\+&quot; &quot;\+j\);\R\t\t\tif \(board\[i\]\[j\] != 0\) \{\R\t\t\t\tcount--;\R\t\t\t\tboard\[i\]\[j\] = 0;\R\t\t\t\}\R\t\t\}\R\t\}\R\R\tprivate class InputListener implements ActionListener \{\R\R\t\t@Override\R\t\tpublic void actionPerformed\(ActionEvent e\) \{\R\t\t\tint row = -1;\R\t\t\tint col = -1;\R\R\t\t\tJTextField source = \(JTextField\) e\.getSource\(\);\R\R\t\t\tboolean found = false;\R\t\t\tfor \(int i = 0; i &lt; 9 &amp;&amp; !found; \+\+i\) \{\R\t\t\t\tfor \(int j = 0; j &lt; 9 &amp;&amp; !found; \+\+j\) \{\R\t\t\t\t\tif \(cells\[i\]\[j\] == source\) \{\R\t\t\t\t\t\trow = i;\R\t\t\t\t\t\tcol = j;\R\t\t\t\t\t\tfound = true;\R\t\t\t\t\t\}\R\t\t\t\t\}\R\t\t\t\}\R\R\t\t\tint in = Integer\.parseInt\(cells\[row\]\[col\]\.getText\(\)\);\R\t\t\tif \(in == board\[row\]\[col\]\) \{\R\t\t\t\tcells\[row\]\[col\]\.setBackground\(Color\.GREEN\);\R\t\t\t\thide\[row\]\[col\] = false;\R\t\t\t\} else \{\R\t\t\t\tcells\[row\]\[col\]\.setBackground\(Color\.RED\);\R\t\t\t\}\R\R\t\t\tisFinished\(\);\R\t\t\}\R\R\t\tpublic boolean isFinished\(\) \{\R\t\t\tfor \(int i = 0; i &lt; hide\.length; i\+\+\) \{\R\t\t\t\tfor \(int j = 0; j &lt; hide\[0\]\.length; j\+\+\) \{\R\t\t\t\t\tif \(hide\[i\]\[j\]\) \{\R\t\t\t\t\t\treturn false;\R\t\t\t\t\t\}\R\t\t\t\t\}\R\t\t\t\}\R\t\t\tJOptionPane\.showMessageDialog\(null, &quot;Congratulation!&quot;\);\R\t\t\treturn true;\R\t\t\}\R\t\}\R\R\tpublic static void main\(String\[\] args\) \{\R\t\tSudoku s = new Sudoku\(\);\R\t\}\R\}\R"/>
			<item value="randomGenerator"/>
			<item value="K"/>
			<item value="N"/>
			<item value="SR9"/>
			<item value="\Rimport java\.awt\.Color;\Rimport java\.awt\.Container;\Rimport java\.awt\.Dimension;\Rimport java\.awt\.Font;\Rimport java\.awt\.GridLayout;\Rimport java\.awt\.event\.ActionEvent;\Rimport java\.awt\.event\.ActionListener;\Rimport java\.util\.Arrays;\R\Rimport javax\.swing\.JFrame;\Rimport javax\.swing\.JOptionPane;\Rimport javax\.swing\.JTextField;\R\Rpublic class Sudoku extends JFrame \{\R\R\tprivate int\[\]\[\] board;\R\tprivate boolean\[\]\[\] hide;\R\tprivate JTextField\[\]\[\] cells;\R\R\tpublic Sudoku\(\) \{\R\t\tboard = new int\[9\]\[9\];\R\t\tfillBoard\(\);\R\R\t\thide = new boolean\[9\]\[9\];\R\t\tfor \(int i = 0; i &lt; hide\.length; i\+\+\) \{\R\t\t\tfor \(int j = 0; j &lt; hide\[0\]\.length; j\+\+\) \{\R\t\t\t\tdouble ran = Math\.random\(\);\R\t\t\t\tif \(ran &gt;= 0\.60\) \{\R\t\t\t\t\thide\[i\]\[j\] = false;\R\t\t\t\t\} else \{\R\t\t\t\t\thide\[i\]\[j\] = true;\R\t\t\t\t\}\R\t\t\t\}\R\t\t\}\R\R\t\tContainer cp = getContentPane\(\);\R\t\tcp\.setLayout\(new GridLayout\(9, 9\)\);\R\R\t\tInputListener il = new InputListener\(\);\R\R\t\tcells = new JTextField\[9\]\[9\];\R\t\tfor \(int i = 0; i &lt; 9; \+\+i\) \{\R\t\t\tfor \(int j = 0; j &lt; 9; \+\+j\) \{\R\t\t\t\tcells\[i\]\[j\] = new JTextField\(\);\R\t\t\t\tcp\.add\(cells\[i\]\[j\]\);\R\t\t\t\tif \(hide\[i\]\[j\]\) \{\R\t\t\t\t\tcells\[i\]\[j\]\.setText\(&quot;&quot;\);\R\t\t\t\t\tcells\[i\]\[j\]\.setEditable\(true\);\R\t\t\t\t\tcells\[i\]\[j\]\.setBackground\(Color\.YELLOW\);\R\t\t\t\t\tcells\[i\]\[j\]\.addActionListener\(il\);\R\t\t\t\t\} else \{\R\t\t\t\t\tcells\[i\]\[j\]\.setText\(board\[i\]\[j\] \+ &quot;&quot;\);\R\t\t\t\t\tcells\[i\]\[j\]\.setEditable\(false\);\R\t\t\t\t\tcells\[i\]\[j\]\.setBackground\(new Color\(240, 240, 240\)\);\R\t\t\t\t\tcells\[i\]\[j\]\.setForeground\(Color\.BLACK\);\R\t\t\t\t\}\R\t\t\t\tcells\[i\]\[j\]\.setHorizontalAlignment\(JTextField\.CENTER\);\R\t\t\t\tcells\[i\]\[j\]\.setFont\(new Font\(&quot;Arial&quot;, Font\.BOLD, 20\)\);\R\t\t\t\}\R\t\t\}\R\R\t\tcp\.setPreferredSize\(new Dimension\(540, 540\)\);\R\t\tpack\(\);\R\R\t\tsetDefaultCloseOperation\(JFrame\.EXIT_ON_CLOSE\);\R\t\tsetTitle\(&quot;Sudoku&quot;\);\R\t\tsetVisible\(true\);\R\t\}\R\R\tpublic void fillBoard\(\) \{\R\t\t// Fill the diagonal of SRN x SRN matrices\R\t\tfillDiagonal\(\);\R\R\t\t// Fill remaining blocks\R\t\tfillRemaining\(0, SRN\);\R\R\t\t// Remove Randomly K digits to make game\R\t\tremoveKDigits\(\);\R\t\}\R\R\t// Fill the diagonal SRN number of SRN x SRN matrices\R\tvoid fillDiagonal\(\) \{\R\R\t\tfor \(int i = 0; i &lt; N; i = i \+ SRN\)\R\R\t\t\t// for diagonal box, start coordinates-&gt;i==j\R\t\t\tfillBox\(i, i\);\R\t\}\R\t\R\tboolean fillRemaining\(int i, int j\)\R    \{\R        //  System\.out\.println\(i\+&quot; &quot;\+j\);\R        if \(j&gt;=N &amp;&amp; i&lt;N-1\)\R        \{\R            i = i \+ 1;\R            j = 0;\R        \}\R        if \(i&gt;=N &amp;&amp; j&gt;=N\)\R            return true;\R \R        if \(i &lt; SRN\)\R        \{\R            if \(j &lt; SRN\)\R                j = SRN;\R        \}\R        else if \(i &lt; N-SRN\)\R        \{\R            if \(j==\(int\)\(i/SRN\)\*SRN\)\R                j =  j \+ SRN;\R        \}\R        else\R        \{\R            if \(j == N-SRN\)\R            \{\R                i = i \+ 1;\R                j = 0;\R                if \(i&gt;=N\)\R                    return true;\R            \}\R        \}\R \R        for \(int num = 1; num&lt;=N; num\+\+\)\R        \{\R            if \(CheckIfSafe\(i, j, num\)\)\R            \{\R                mat\[i\]\[j\] = num;\R                if \(fillRemaining\(i, j\+1\)\)\R                    return true;\R \R                mat\[i\]\[j\] = 0;\R            \}\R        \}\R        return false;\R    \}\R\R\tprivate class InputListener implements ActionListener \{\R\R\t\t@Override\R\t\tpublic void actionPerformed\(ActionEvent e\) \{\R\t\t\tint row = -1;\R\t\t\tint col = -1;\R\R\t\t\tJTextField source = \(JTextField\) e\.getSource\(\);\R\R\t\t\tboolean found = false;\R\t\t\tfor \(int i = 0; i &lt; 9 &amp;&amp; !found; \+\+i\) \{\R\t\t\t\tfor \(int j = 0; j &lt; 9 &amp;&amp; !found; \+\+j\) \{\R\t\t\t\t\tif \(cells\[i\]\[j\] == source\) \{\R\t\t\t\t\t\trow = i;\R\t\t\t\t\t\tcol = j;\R\t\t\t\t\t\tfound = true;\R\t\t\t\t\t\}\R\t\t\t\t\}\R\t\t\t\}\R\R\t\t\tint in = Integer\.parseInt\(cells\[row\]\[col\]\.getText\(\)\);\R\t\t\tif \(in == board\[row\]\[col\]\) \{\R\t\t\t\tcells\[row\]\[col\]\.setBackground\(Color\.GREEN\);\R\t\t\t\thide\[row\]\[col\] = false;\R\t\t\t\} else \{\R\t\t\t\tcells\[row\]\[col\]\.setBackground\(Color\.RED\);\R\t\t\t\}\R\R\t\t\tisFinished\(\);\R\t\t\}\R\R\t\tpublic boolean isFinished\(\) \{\R\t\t\tfor \(int i = 0; i &lt; hide\.length; i\+\+\) \{\R\t\t\t\tfor \(int j = 0; j &lt; hide\[0\]\.length; j\+\+\) \{\R\t\t\t\t\tif \(hide\[i\]\[j\]\) \{\R\t\t\t\t\t\treturn false;\R\t\t\t\t\t\}\R\t\t\t\t\}\R\t\t\t\}\R\t\t\tJOptionPane\.showMessageDialog\(null, &quot;Congratulation!&quot;\);\R\t\t\treturn true;\R\t\t\}\R\t\}\R\R\tpublic static void main\(String\[\] args\) \{\R\t\tSudoku s = new Sudoku\(\);\R\t\}\R\}\R"/>
			<item value="begin"/>
			<item value="begin."/>
			<item value="E_Square"/>
			<item value="E_Rectangle"/>
			<item value="E_Shape"/>
			<item value="E_Circle"/>
		</list>
		<list key="replacehistory">
			<item value="missing"/>
			<item value="3"/>
			<item value="9"/>
			<item value=""/>
			<item value="Square"/>
			<item value="Rectangle"/>
			<item value="Shape"/>
			<item value="Circle2"/>
			<item value="addEdge"/>
			<item value="ArrayList"/>
			<item value="ArrayLists"/>
			<item value="current"/>
			<item value="E"/>
			<item value="frame"/>
			<item value="currencyNames"/>
		</list>
	</section>
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog_dialogBounds">
		<item value="248" key="DIALOG_WIDTH"/>
		<item value="1|Segoe UI|9.0|0|WINDOWS|1|-21|0|0|0|400|0|0|0|1|0|0|5|0|Segoe UI" key="DIALOG_FONT_NAME"/>
		<item value="354" key="DIALOG_HEIGHT"/>
		<item value="713" key="DIALOG_X_ORIGIN"/>
		<item value="94" key="DIALOG_Y_ORIGIN"/>
	</section>
</section>
